Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> compostion
Rule 1     compostion -> prelude bars
Rule 2     compostion -> bars
Rule 3     prelude -> LETTER NUMBER POST NUMBER LPARAN NUMBER RPARAN
Rule 4     prelude -> LETTER NUMBER POST NUMBER
Rule 5     bars -> LBRACKET notes RBRACKET bars
Rule 6     bars -> LBRACKET notes RBRACKET
Rule 7     notes -> pitch DASH duration notes
Rule 8     notes -> pitch DASH duration
Rule 9     pitch -> LETTER DASH NUMBER
Rule 10    duration -> NUMBER

Terminals, with rules where they appear

DASH                 : 7 8 9
LBRACKET             : 5 6
LETTER               : 3 4 9
LPARAN               : 3
NUMBER               : 3 3 3 4 4 9 10
POST                 : 3 4
RBRACKET             : 5 6
RPARAN               : 3
error                : 

Nonterminals, with rules where they appear

bars                 : 1 2 5
compostion           : 0
duration             : 7 8
notes                : 5 6 7
pitch                : 7 8
prelude              : 1

Parsing method: LALR

state 0

    (0) S' -> . compostion
    (1) compostion -> . prelude bars
    (2) compostion -> . bars
    (3) prelude -> . LETTER NUMBER POST NUMBER LPARAN NUMBER RPARAN
    (4) prelude -> . LETTER NUMBER POST NUMBER
    (5) bars -> . LBRACKET notes RBRACKET bars
    (6) bars -> . LBRACKET notes RBRACKET

    LETTER          shift and go to state 4
    LBRACKET        shift and go to state 3

    bars                           shift and go to state 1
    compostion                     shift and go to state 2
    prelude                        shift and go to state 5

state 1

    (2) compostion -> bars .

    $end            reduce using rule 2 (compostion -> bars .)


state 2

    (0) S' -> compostion .



state 3

    (5) bars -> LBRACKET . notes RBRACKET bars
    (6) bars -> LBRACKET . notes RBRACKET
    (7) notes -> . pitch DASH duration notes
    (8) notes -> . pitch DASH duration
    (9) pitch -> . LETTER DASH NUMBER

    LETTER          shift and go to state 7

    notes                          shift and go to state 6
    pitch                          shift and go to state 8

state 4

    (3) prelude -> LETTER . NUMBER POST NUMBER LPARAN NUMBER RPARAN
    (4) prelude -> LETTER . NUMBER POST NUMBER

    NUMBER          shift and go to state 9


state 5

    (1) compostion -> prelude . bars
    (5) bars -> . LBRACKET notes RBRACKET bars
    (6) bars -> . LBRACKET notes RBRACKET

    LBRACKET        shift and go to state 3

    bars                           shift and go to state 10

state 6

    (5) bars -> LBRACKET notes . RBRACKET bars
    (6) bars -> LBRACKET notes . RBRACKET

    RBRACKET        shift and go to state 11


state 7

    (9) pitch -> LETTER . DASH NUMBER

    DASH            shift and go to state 12


state 8

    (7) notes -> pitch . DASH duration notes
    (8) notes -> pitch . DASH duration

    DASH            shift and go to state 13


state 9

    (3) prelude -> LETTER NUMBER . POST NUMBER LPARAN NUMBER RPARAN
    (4) prelude -> LETTER NUMBER . POST NUMBER

    POST            shift and go to state 14


state 10

    (1) compostion -> prelude bars .

    $end            reduce using rule 1 (compostion -> prelude bars .)


state 11

    (5) bars -> LBRACKET notes RBRACKET . bars
    (6) bars -> LBRACKET notes RBRACKET .
    (5) bars -> . LBRACKET notes RBRACKET bars
    (6) bars -> . LBRACKET notes RBRACKET

    $end            reduce using rule 6 (bars -> LBRACKET notes RBRACKET .)
    LBRACKET        shift and go to state 3

    bars                           shift and go to state 15

state 12

    (9) pitch -> LETTER DASH . NUMBER

    NUMBER          shift and go to state 16


state 13

    (7) notes -> pitch DASH . duration notes
    (8) notes -> pitch DASH . duration
    (10) duration -> . NUMBER

    NUMBER          shift and go to state 18

    duration                       shift and go to state 17

state 14

    (3) prelude -> LETTER NUMBER POST . NUMBER LPARAN NUMBER RPARAN
    (4) prelude -> LETTER NUMBER POST . NUMBER

    NUMBER          shift and go to state 19


state 15

    (5) bars -> LBRACKET notes RBRACKET bars .

    $end            reduce using rule 5 (bars -> LBRACKET notes RBRACKET bars .)


state 16

    (9) pitch -> LETTER DASH NUMBER .

    DASH            reduce using rule 9 (pitch -> LETTER DASH NUMBER .)


state 17

    (7) notes -> pitch DASH duration . notes
    (8) notes -> pitch DASH duration .
    (7) notes -> . pitch DASH duration notes
    (8) notes -> . pitch DASH duration
    (9) pitch -> . LETTER DASH NUMBER

    RBRACKET        reduce using rule 8 (notes -> pitch DASH duration .)
    LETTER          shift and go to state 7

    notes                          shift and go to state 20
    pitch                          shift and go to state 8

state 18

    (10) duration -> NUMBER .

    LETTER          reduce using rule 10 (duration -> NUMBER .)
    RBRACKET        reduce using rule 10 (duration -> NUMBER .)


state 19

    (3) prelude -> LETTER NUMBER POST NUMBER . LPARAN NUMBER RPARAN
    (4) prelude -> LETTER NUMBER POST NUMBER .

    LPARAN          shift and go to state 21
    LBRACKET        reduce using rule 4 (prelude -> LETTER NUMBER POST NUMBER .)


state 20

    (7) notes -> pitch DASH duration notes .

    RBRACKET        reduce using rule 7 (notes -> pitch DASH duration notes .)


state 21

    (3) prelude -> LETTER NUMBER POST NUMBER LPARAN . NUMBER RPARAN

    NUMBER          shift and go to state 22


state 22

    (3) prelude -> LETTER NUMBER POST NUMBER LPARAN NUMBER . RPARAN

    RPARAN          shift and go to state 23


state 23

    (3) prelude -> LETTER NUMBER POST NUMBER LPARAN NUMBER RPARAN .

    LBRACKET        reduce using rule 3 (prelude -> LETTER NUMBER POST NUMBER LPARAN NUMBER RPARAN .)

